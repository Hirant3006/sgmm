import React, { useEffect } from 'react';
import { Modal, Form, Input, InputNumber, Select, Typography } from 'antd';

const { Option } = Select;
const { Text } = Typography;

const MachineModal = ({ visible, onCancel, onSubmit, machine, machineTypes }) => {
  const [form] = Form.useForm();
  const isEditing = !!machine;
  
  // Reset form when modal opens/closes or machine changes
  useEffect(() => {
    if (visible) {
      form.resetFields();
      
      if (machine) {
        // Fill form with machine data for editing
        form.setFieldsValue({
          machine_type_id: machine.machine_type_id,
          price: machine.price,
        });
      }
    }
  }, [visible, machine, form]);
  
  const handleSubmit = () => {
    form.validateFields()
      .then(values => {
        onSubmit(values);
        form.resetFields();
      })
      .catch(info => {
        console.log('Validate Failed:', info);
      });
  };

  return (
    <Modal
      title={isEditing ? "Update Machine" : "Add New Machine"}
      open={visible}
      onCancel={onCancel}
      onOk={handleSubmit}
      okText={isEditing ? "Update" : "Add"}
      cancelText="Cancel"
    >
      <Form
        form={form}
        layout="vertical"
        name="machine_form"
      >
        {isEditing && (
          <Form.Item label="Machine ID">
            <Input value={machine?.machine_id} disabled style={{ color: '#666' }} />
            <Text type="secondary" style={{ fontSize: '12px' }}>
              Machine ID cannot be modified
            </Text>
          </Form.Item>
        )}
        
        <Form.Item
          name="machine_type_id"
          label="Machine Type"
          rules={[{ required: true, message: 'Please select a machine type!' }]}
        >
          <Select placeholder="Select machine type">
            {machineTypes && machineTypes.map(type => (
              <Option key={type.machine_type_id} value={type.machine_type_id}>
                {type.name}
              </Option>
            ))}
          </Select>
        </Form.Item>
        
        <Form.Item
          name="price"
          label="Price (VND)"
          rules={[
            { required: true, message: 'Please enter price!' },
            { type: 'number', min: 0, message: 'Price cannot be negative!' },
          ]}
          initialValue={0}
        >
          <InputNumber
            style={{ width: '100%' }}
            formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
            parser={value => value.replace(/\$\s?|(,*)/g, '')}
            min={0}
            placeholder="Enter price"
            addonAfter="VND"
          />
        </Form.Item>
      </Form>
      
      {!isEditing && (
        <Text type="secondary">
          Note: Machine ID will be auto-generated by the system
        </Text>
      )}
    </Modal>
  );
};

export default MachineModal; 